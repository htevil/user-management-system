import { createSlice } from "@reduxjs/toolkit";

// Initial state with two arrays: users (filtered list) and allUsers (original list)
const initialState = {
  users: [],    // Filtered list of users
  allUsers: [], // Store the original list of users here
}

const userSlice = createSlice({
  name: 'users',
  initialState,
  reducers: {
    // Sets the users list and stores it in both users and allUsers
    setUser: (state, action) => {
      state.users = action.payload;
      state.allUsers = action.payload;  // Store the original list in allUsers
    },
    
    // Adds a new user to both users and allUsers
    addUser: (state, action) => {
      state.users.push(action.payload);
      state.allUsers.push(action.payload);  // Update allUsers when a new user is added
    },
    
    // Removes a user from both users and allUsers
    removeUser: (state, action) => {
      state.users = state.users.filter((item) => item.id !== action.payload.id);
      state.allUsers = state.allUsers.filter((item) => item.id !== action.payload.id);  // Also update allUsers
    },
    
    // Filters users based on a search term (e.g., for filtering by user name, email, etc.)
    filterUser: (state, action) => {
      const searchTerm = action.payload.toLowerCase();
      
      // Always filter from the full list (allUsers) and update users
      state.users = state.allUsers.filter((user) => {
        return (
          user.name.toLowerCase().includes(searchTerm) ||  // Search by name
          user.email.toLowerCase().includes(searchTerm)    // Search by email
          // Add more fields here if necessary, e.g. user.username, user.company.name
        );
      });
    }
  }
});

// Export the action creators generated by createSlice
export const { setUser, addUser, removeUser, filterUser } = userSlice.actions;

// Export the reducer to be used in the Redux store
export default userSlice.reducer;
